@page "/users/{Id}/{Tab?}"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IDialogService Dialog
@inject ICourseService CoursesConnect
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthConnect
@inject ILogService LogService

<PageTitle>
    @if (Model != null)
    {
        if (Tab != "edit")
            @($"{Model.FirstName} {Model.LastName} | Details")
        else
            @($"{Model.FirstName} {Model.LastName} | Edit Password")
    }
</PageTitle>

@if (loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}

@if (Model != null)
{
    <MudToolBar DisableGutters="true" WrapContent="true">
        <MudText Typo="Typo.h5">@($"{Model.FirstName} {Model.LastName}")</MudText>
        <MudSpacer />
        <MudButtonGroup Variant="Variant.Outlined">
            <MudButton Href="/users" StartIcon="@Icons.Material.Filled.ChevronLeft" Variant="Variant.Outlined" Size="Size.Small">
                <MudText Color="Color.Default">Users</MudText>
            </MudButton>
            @if (Tab != "edit")
            {
                <MudButton OnClick="() => OnDeleteClick(Model.Id)" Variant="Variant.Outlined" Color="Color.Error" Class="ms-1" Size="Size.Small">
                    <MudText Color="Color.Error">Delete</MudText>
                </MudButton>
            }
        </MudButtonGroup>
    </MudToolBar>
    <MudTabs ActivePanelIndex="activeTab" ActivePanelIndexChanged="OnActiveRouteIndexChanged"
             ApplyEffectsToContainer="true" Elevation="1" Rounded="true" PanelClass="pa-6">
        <MudTabPanel Text="Details">
            <UsersDetails Model="Model"></UsersDetails>
        </MudTabPanel>
        <MudTabPanel Text="Edit Password">
            <UsersUpdate Model="Model" OnUpdated="OnUpdated"></UsersUpdate>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? Tab { get; set; }

    ClaimsPrincipal? user { get; set; }
    User? User { get; set; }

    User? Model;
    int activeTab = 0;
    bool loading = false;

    ICollection<Course>? Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        Model = Id == null ? null : await AuthConnect.GetAsync(Guid.Parse(Id));
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        var userIdClaim = user.FindFirst("Id");
        if (userIdClaim != null)
        {
            User = await AuthConnect.GetAsync(Guid.Parse(userIdClaim.Value));
        }
        loading = false;
    }

    protected override void OnParametersSet()
    {
        activeTab = Tab switch { "edit" => 1, _ => 0 };
    }

    void OnActiveRouteIndexChanged(int index)
    {
        if (activeTab != index)
        {
            activeTab = index;
            Navigation.NavigateTo(index switch
            {
                1 => $"/users/{Id}/edit",
                _ => $"/users/{Id}",
            });
        }
    }

    void OnUpdated(User model) => Model = model;

    async Task OnDeleteClick(Guid Id)
    {
        Model = await AuthConnect.GetAsync(Id);
        var parameters = new DialogParameters();
        parameters.Add(nameof(UsersDelete.Model), Model);

        var dialog = await Dialog.ShowAsync<UsersDelete>("Delete User", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Navigation.NavigateTo("/users");
        }
        Navigation.NavigateTo("/users");
    }


}
