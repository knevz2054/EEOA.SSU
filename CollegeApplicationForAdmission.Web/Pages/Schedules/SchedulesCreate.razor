@inject ISnackbar Snackbar
@inject IScheduleService SchedulesConnect
@inject ICampusService CampusesConnect

@if (Campuses != null)
{
    <EditForm OnValidSubmit="Submit" Model="Model">
        <MudDialog>
            <DialogContent>
                <DataAnnotationsValidator />
                <MudText Color="@Color.Error">@error</MudText>
                <MudDatePicker Label="Date Schedule" Editable="true" @bind-Date="date" Placeholder="Select Date" MinDate="@DateTime.Today" Variant="Variant.Outlined" />
                <MudSelect @bind-Value="CampusId" Label="Campus" Variant="Variant.Outlined">
                    @foreach (var camp in Campuses.Where(x => x.Courses.Count != 0))
                    {
                        <MudSelectItem Value="camp.Id">@($"{camp.Name}")</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" @bind-Value="Model.Meridiem" Label="Time" Variant="Variant.Outlined">
                    <MudSelectItem Value=@("8:00am")>8:00am</MudSelectItem>
                    <MudSelectItem Value=@("1:00pm")>1:00pm</MudSelectItem>
                </MudSelect>
                <MudTextField @bind-Value="Model.Venue" For="@(() => Model.Venue)" Label="Venue" Variant="Variant.Outlined"></MudTextField>
                <MudNumericField @bind-Value="Model.Slot" For="@(() => Model.Slot)" Label="Slot" Variant="Variant.Outlined"></MudNumericField>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="Cancel">Close</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}


@code {
    [CascadingParameter]
    MudDialogInstance? Dialog { get; set; }
    [Parameter]
    public User User { get; set; }

    Schedule Model = new();    
    ICollection<Campus>? Campuses { get; set; }
    Guid CampusId { get; set; }
    string error { get; set; } = "";
    private bool loading;
    DateTime? date = DateTime.Today;
    protected override async Task OnInitializedAsync()
    {       

        if (User.Access != "All")
        {
            var campuses = await CampusesConnect.GetCampusNoApplicant();
            Campuses = campuses.Where(x => x.Name == User.Access).ToList();
            CampusId = Campuses.First().Id;
        }
        else
        {
            Campuses = await CampusesConnect.GetCampusNoApplicant();
            CampusId = Campuses.First().Id;
        }
    }

    void Cancel() => Dialog?.Cancel();


    async Task Submit()
    {
        loading = true;
        error = "";

        try
        {
            Model.DateCreated = DateTime.Now;
            Model.CreatedBy = $"{User.FirstName} {User.LastName}";
            Model.UpdatedBy = $"{User.FirstName} {User.LastName}";
            Model.DateUpdated = DateTime.Now;
            Model.ScheduleDate = date.Value;
            Model.CampusId = CampusId;
            var model = await SchedulesConnect.CreateAsync(Model);            
            Snackbar.Add("New Schedule has been created.", Severity.Success);
            Dialog?.Close(DialogResult.Ok(model));
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        loading = false;

    }
}
