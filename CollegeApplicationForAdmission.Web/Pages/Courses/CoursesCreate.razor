@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthConnect
@inject IDepartmentService DepartmentsConnect
@inject ICampusService CampusesConnect
@inject ICourseService CoursesConnect

@if (Campuses != null)
{
    <EditForm OnValidSubmit="Submit" Model="Model">
        <MudDialog>
            <DialogContent>
                <DataAnnotationsValidator />
                <MudSelect T="Guid" ValueChanged="(value) => OnCampusChanged(value)" Label="Select Campus" Variant="Variant.Outlined">
                    <MudSelectItem Value="Guid.Empty">Select Campus</MudSelectItem>
                    @foreach (var campus in Campuses)
                    {
                        <MudSelectItem Value="@(campus.Id)">@campus.Name</MudSelectItem>
                    }
                </MudSelect>
                @if (Campus != null && Campus.HasDepartment ==  true)
                {
                    <MudSelect T="Guid" ValueChanged="(value) => OnDepartmentChanged(value)" Label="Select department" Variant="Variant.Outlined">
                        <MudSelectItem Value="Guid.Empty">Select Department</MudSelectItem>
                        @foreach (var dep in Campus.Departments)
                        {
                            <MudSelectItem Value="@(dep.Id)">@dep.Name</MudSelectItem>
                        }
                    </MudSelect>
                }              

                <MudTextField @bind-Value="Model.Name" For="@(() => Model.Name)" Label="Course Name" Variant="Variant.Outlined"></MudTextField>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="Cancel">Close</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {

    [CascadingParameter]
    MudDialogInstance? Dialog { get; set; }
    [Parameter]
    public User User { get; set; }

    Course Model = new();
    Campus? Campus { get; set; }
    ICollection<Campus>? Campuses { get; set; }   
    string error { get; set; } = "";
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        Campuses = await CampusesConnect.GetCampusNoApplicant();

        if (User.Access != "All")
        {
            var campuses = await CampusesConnect.GetCampusNoApplicant();
            Campuses = campuses.Where(x => x.Name == User.Access).ToList();
        }
        else
        {
            Campuses = await CampusesConnect.GetCampusNoApplicant();
        }
    }

    void Cancel() => Dialog?.Cancel();

    async Task OnCampusChanged(Guid id)
    {
        if(id != Guid.Empty)
        {
            Campus = await CampusesConnect.GetAsync(id);
            Model.CampusId = id;
        }

    }
    void OnDepartmentChanged(Guid id)
    {
        Model.DepartmentId = id;
    }

    async Task Submit()
    {
        loading = true;
        error = "";

        try
        {
            Model.DateCreated = DateTime.Now;
            Model.CreatedBy = $"{User.FirstName} {User.LastName}";
            Model.UpdatedBy = $"{User.FirstName} {User.LastName}";
            Model.DateUpdated = DateTime.Now;

            var model = await CoursesConnect.CreateAsync(Model);

            Snackbar.Add($"{model.Name} has been added to list.", Severity.Success);
            Dialog?.Close(DialogResult.Ok(model));

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        loading = false;

    }
}
