@inject ISnackbar Snackbar
@inject IEducationalBackGroundService EducationalBackgroundsConnect
@inject IDialogService Dialog
@using System.Text.RegularExpressions;
<EditForm Model="EBModel" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <MudText Color="@Color.Error">@error</MudText>
    <MudText Typo="Typo.h5">Academic Background</MudText>
    <MudGrid Spacing="1">
        <MudItem xs="12" sm="4" md="4">
            <MudTextField @bind-Value="EBModel.SchoolLastAttended" For="@(() => EBModel.SchoolLastAttended)" Label="School Last Attended" Variant="Variant.Text"></MudTextField>
        </MudItem>

        <MudItem xs="12" sm="4" md="4">
            <MudTextField @bind-Value="EBModel.SchoolAddress" For="@(() => EBModel.SchoolAddress)" Label="School Address" Variant="Variant.Text"></MudTextField>
        </MudItem>

        <MudItem xs="12" sm="4" md="4">
            <MudSelect @bind-Value="EBModel.SchoolSector" For="@(() => EBModel.SchoolSector)" Label="School Sector" Variant="Variant.Text">
                @foreach (SchoolSector sector in (SchoolSector[])Enum.GetValues(typeof(SchoolSector)))
                {
                    <MudSelectItem Value="@(sector.ToFriendlyName().ToString())">@sector.ToFriendlyName()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudGrid Spacing="1">
        @if (Model.ApplicantStatus == "New")
        {
            <MudItem xs="12" sm="4" md="4">
                <MudSelect @bind-Value="EBModel.Track" For="@(() => EBModel.Track)" Label="Track/Strand/Program Major" Variant="Variant.Text">
                    @foreach (TracksAndStrands track in (TracksAndStrands[])Enum.GetValues(typeof(TracksAndStrands)))
                    {
                        <MudSelectItem Value="@(track.ToFriendlyName().ToString())">@track.ToFriendlyName()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" sm="4" md="4">
                <MudTextField @bind-Value="EBModel.Track" For="@(() => EBModel.Track)" Label="Program Major" Variant="Variant.Text"></MudTextField>
            </MudItem>
        }

        <MudItem xs="12" sm="4" md="4">
            <MudTextField @bind-Value="EBModel.Honors" For="@(() => EBModel.Honors)" Label="Honors Received" Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="4" md="4">
            <MudDatePicker Label="Date Graduated / Tentative Graduation" Editable="true" @bind-Date="YearGraduated" Variant="Variant.Text" />
        </MudItem>
    </MudGrid>

    <MudGrid Spacing="1">
        <MudItem xs="12">
            <MudTextField MaxLines="12" @bind-Value="EBModel.LRN" For="@(() => EBModel.LRN)" Label="LRN" Variant="Variant.Text"></MudTextField>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <LoadingButton Loading="loading" Label="Next" Variant="Variant.Filled" />
        </MudItem>
    </MudGrid>

</EditForm>

@code {
    EducationalBackground EBModel = new();
    [Parameter]
    public Applicant? Model { get; set; }
    [Parameter]
    public Action OnSubmissionSuccess { get; set; }

    DateTime? YearGraduated = DateTime.Today;
    bool loading = false;
    string error = "";
    string pattern = @"^\d{12}$";
    protected override async Task OnInitializedAsync()
    {

    }

    async Task Submit()
    {
        loading = true;
        error = "";

        try
        {
            if (Model != null)
            {
                if (!Regex.IsMatch(EBModel.LRN, pattern))
                {
                    throw new InvalidOperationException("Please provide a valid LRN. Ex: 198765150721");
                }
                EBModel.ApplicantId = Model.Id;
                EBModel.YearGraduated = int.Parse(YearGraduated.Value.Year.ToString());
                var model = await EducationalBackgroundsConnect.CreateAsync(EBModel);
            }

            Snackbar.Add($"Step 3 completed", Severity.Success);
            OnSubmissionSuccess?.Invoke();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        loading = false;
    }
}
